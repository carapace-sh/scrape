name: cargo
description: ''
flags:
  -C=: Change to DIRECTORY before doing anything (nightly-only)
  --explain=: Provide a detailed explanation of a rustc error message
  -h, --help: Print help
  --list: List installed commands
  -V, --version: Print version info and exit
persistentflags:
  -Z=*: Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details
  --color=: Coloring
  --config=*: Override a configuration value
  --frozen: Equivalent to specifying both --locked and --offline
  --locked: Assert that `Cargo.lock` will remain unchanged
  --offline: Run without accessing the network
  -q, --quiet: Do not print cargo log messages
  -v, --verbose*: Use verbose output (-vv very verbose/build.rs output)
completion:
  flag:
    C:
    - $directories
    color:
    - auto
    - always
    - never
commands:
- name: add
  description: Add dependencies to a Cargo.toml manifest file
  flags:
    --base=: The path base to use when adding from a local crate (unstable).
    --branch=: Git branch to download the crate from
    --build: Add as build dependency
    --default-features: Re-enable the default features
    --dev: Add as development dependency
    -n, --dry-run: Don't actually write the manifest
    -F, --features=*: Space or comma separated list of features to activate
    --git=: Git repository location
    -h, --help: Print help (see more with '--help')
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --no-default-features: Disable the default features
    --no-optional: Mark the dependency as required
    --no-public: Mark the dependency as private (unstable)
    --optional: Mark the dependency as optional
    -p, --package=: Package to modify
    --path=: Filesystem path to local crate to add
    --public: Mark the dependency as public (unstable)
    --registry=: Package registry for this dependency
    --rename=: Rename the dependency
    --rev=: Git reference to download the crate from
    --tag=: Git tag to download the crate from
    --target=: Add as dependency to the given target platform
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: bench
  description: Execute all benchmarks of a local package
  flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Benchmark all targets
    --bench=*: Benchmark only the specified bench target
    --benches: Benchmark all targets that have `bench = true` set
    --bin=*: Benchmark only the specified binary
    --bins: Benchmark all binaries
    --example=*: Benchmark only the specified example
    --examples: Benchmark all examples
    --exclude=*: Exclude packages from the benchmark
    -F, --features=*: Space or comma separated list of features to activate
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --lib: Benchmark only this package's library
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    --no-fail-fast: Run all benchmarks regardless of failure
    --no-run: Compile, but don't run benchmarks
    -p, --package=*: Package to run benchmarks for
    --profile=: Build artifacts with the specified profile
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --test=*: Benchmark only the specified test target
    --tests: Benchmark all targets that have `test = true` set
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Benchmark all packages in the workspace
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
    positional:
    - []
- name: build
  description: Compile a local package and all of its dependencies
  flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Build all targets
    --artifact-dir=: Copy final artifacts to this directory (unstable)
    --bench=*: Build only the specified bench target
    --benches: Build all targets that have `bench = true` set
    --bin=*: Build only the specified binary
    --bins: Build all binaries
    --build-plan: Output the build plan in JSON (unstable)
    --example=*: Build only the specified example
    --examples: Build all examples
    --exclude=*: Exclude packages from the build
    -F, --features=*: Space or comma separated list of features to activate
    --future-incompat-report: Outputs a future incompatibility report at the end of the build
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --lib: Build only this package's library
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    -p, --package=*: Package to build (see `cargo help pkgid`)
    --profile=: Build artifacts with the specified profile
    -r, --release: Build artifacts in release mode, with optimizations
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --test=*: Build only the specified test target
    --tests: Build all targets that have `test = true` set
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Build all packages in the workspace
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
- name: check
  description: Check a local package and all of its dependencies for errors
  flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Check all targets
    --bench=*: Check only the specified bench target
    --benches: Check all targets that have `bench = true` set
    --bin=*: Check only the specified binary
    --bins: Check all binaries
    --example=*: Check only the specified example
    --examples: Check all examples
    --exclude=*: Exclude packages from the check
    -F, --features=*: Space or comma separated list of features to activate
    --future-incompat-report: Outputs a future incompatibility report at the end of the build
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --lib: Check only this package's library
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    -p, --package=*: Package(s) to check
    --profile=: Check artifacts with the specified profile
    -r, --release: Check artifacts in release mode, with optimizations
    --target=*: Check for the target triple
    --target-dir=: Directory for all generated artifacts
    --test=*: Check only the specified test target
    --tests: Check all targets that have `test = true` set
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Check all packages in the workspace
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
- name: clean
  description: Remove artifacts that cargo has generated in the past
  flags:
    --doc: Whether or not to clean just the documentation directory
    -n, --dry-run: Display what would be deleted without deleting anything
    -h, --help: Print help
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    -p, --package=*: Package to clean artifacts for
    --profile=: Clean artifacts of the specified profile
    -r, --release: Whether or not to clean release artifacts
    --target=*: Target triple to clean output for
    --target-dir=: Directory for all generated artifacts
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: config
  description: Inspect configuration values
  flags:
    -h, --help: Print help
  completion:
    flag:
      color:
      - auto
      - always
      - never
  commands:
  - name: get
    description: ''
    flags:
      --format=: Display format
      -h, --help: Print help
      --merged=: Whether or not to merge config values
      --show-origin: Display where the config value is defined
    completion:
      flag:
        color:
        - auto
        - always
        - never
        format:
        - toml
        - json
        - json-value
        merged:
        - yes
        - no
      positional:
      - []
- name: doc
  description: Build a package's documentation
  flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --bin=*: Document only the specified binary
    --bins: Document all binaries
    --document-private-items: Document private items
    --example=*: Document only the specified example
    --examples: Document all examples
    --exclude=*: Exclude packages from the build
    -F, --features=*: Space or comma separated list of features to activate
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --lib: Document only this package's library
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    --no-deps: Don't build documentation for dependencies
    --open: Opens the docs in a browser after the operation
    -p, --package=*: Package to document
    --profile=: Build artifacts with the specified profile
    -r, --release: Build artifacts in release mode, with optimizations
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Document all packages in the workspace
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
- name: fetch
  description: Fetch dependencies of a package from the network
  flags:
    -h, --help: Print help
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --target=*: Fetch dependencies for the target triple
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: fix
  description: Automatically fix lint warnings reported by rustc
  flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Fix all targets (default)
    --allow-dirty: Fix code even if the working directory is dirty or has staged changes
    --allow-no-vcs: Fix code even if a VCS was not detected
    --allow-staged: Fix code even if the working directory has staged changes
    --bench=*: Fix only the specified bench target
    --benches: Fix all targets that have `bench = true` set
    --bin=*: Fix only the specified binary
    --bins: Fix all binaries
    --broken-code: Fix code even if it already has compiler errors
    --edition: Fix in preparation for the next edition
    --edition-idioms: Fix warnings to migrate to the idioms of an edition
    --example=*: Fix only the specified example
    --examples: Fix all examples
    --exclude=*: Exclude packages from the fixes
    -F, --features=*: Space or comma separated list of features to activate
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --lib: Fix only this package's library
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    -p, --package=*: Package(s) to fix
    --profile=: Build artifacts with the specified profile
    -r, --release: Fix artifacts in release mode, with optimizations
    --target=*: Fix for the target triple
    --target-dir=: Directory for all generated artifacts
    --test=*: Fix only the specified test target
    --tests: Fix all targets that have `test = true` set
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --workspace: Fix all packages in the workspace
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
- name: generate-lockfile
  description: Generate the lockfile for a package
  flags:
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: help
  description: Displays help for a cargo subcommand
  flags:
    -h, --help: Print help
  completion:
    flag:
      color:
      - auto
      - always
      - never
    positional:
    - []
- name: info
  description: Display information about a package
  flags:
    -h, --help: Print help
    --index=: Registry index URL to search packages in
    --registry=: Registry to search packages in
  completion:
    flag:
      color:
      - auto
      - always
      - never
    positional:
    - []
- name: init
  description: Create a new cargo package in an existing directory
  flags:
    --bin: Use a binary (application) template [default]
    --edition=: Edition to set for the crate generated
    -h, --help: Print help
    --lib: Use a library template
    --name=: Set the resulting package name, defaults to the directory name
    --registry=: Registry to use
    --vcs=: Initialize a new repository for the given version control system, overriding a global configuration.
  completion:
    flag:
      color:
      - auto
      - always
      - never
      edition:
      - '2015'
      - '2018'
      - '2021'
      - '2024'
      vcs:
      - git
      - hg
      - pijul
      - fossil
      - none
    positional:
    - []
- name: install
  description: Install a Rust binary
  flags:
    --all-features: Activate all available features
    --bin=*: Install only the specified binary
    --bins: Install all binaries
    --branch=: Branch to use when installing from git
    --debug: Build in debug mode (with the 'dev' profile) instead of release mode
    -n, --dry-run: Perform all checks without installing (unstable)
    --example=*: Install only the specified example
    --examples: Install all examples
    -F, --features=*: Space or comma separated list of features to activate
    -f, --force: Force overwriting existing crates or binaries
    --git=: Git URL to install the specified crate from
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --index=: Registry index to install from
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --list: List all installed packages and their versions
    --lockfile-path=: Path to Cargo.lock (unstable)
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    --no-track: Do not save tracking information
    --path=: Filesystem path to local crate to install from
    --profile=: Install artifacts with the specified profile
    --registry=: Registry to use
    --rev=: Specific commit to use when installing from git
    --root=: Directory to install packages into
    --tag=: Tag to use when installing from git
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --version=: Specify a version to install
    --vers=&: Specify a version to install
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
- name: locate-project
  description: Print a JSON representation of a Cargo.toml file's location
  flags:
    -h, --help: Print help
    --manifest-path=: Path to Cargo.toml
    --message-format=: Output representation
    --workspace: Locate Cargo.toml of the workspace root
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - json
      - plain
- name: login
  description: Log in to a registry.
  flags:
    -h, --help: Print help
    --registry=: Registry to use
  completion:
    flag:
      color:
      - auto
      - always
      - never
    positional:
    - []
- name: logout
  description: Remove an API token from the registry locally
  flags:
    -h, --help: Print help
    --registry=: Registry to use
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: metadata
  description: Output the resolved dependencies of a package, the concrete used versions including overrides, in machine-readable format
  flags:
    --all-features: Activate all available features
    -F, --features=*: Space or comma separated list of features to activate
    --filter-platform=*: Only include resolve dependencies matching the given target-triple
    --format-version=: Format version
    -h, --help: Print help
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --no-default-features: Do not activate the `default` feature
    --no-deps: Output information only about the workspace members and don't fetch dependencies
  completion:
    flag:
      color:
      - auto
      - always
      - never
      format-version:
      - '1'
- name: new
  description: Create a new cargo package at <path>
  flags:
    --bin: Use a binary (application) template [default]
    --edition=: Edition to set for the crate generated
    -h, --help: Print help
    --lib: Use a library template
    --name=: Set the resulting package name, defaults to the directory name
    --registry=: Registry to use
    --vcs=: Initialize a new repository for the given version control system, overriding a global configuration.
  completion:
    flag:
      color:
      - auto
      - always
      - never
      edition:
      - '2015'
      - '2018'
      - '2021'
      - '2024'
      vcs:
      - git
      - hg
      - pijul
      - fossil
      - none
    positional:
    - []
- name: owner
  description: Manage the owners of a crate on the registry
  flags:
    -a, --add=*: Name of a user or team to invite as an owner
    -h, --help: Print help
    --index=: Registry index URL to modify owners for
    -l, --list: List owners of a crate
    --registry=: Registry to modify owners for
    -r, --remove=*: Name of a user or team to remove as an owner
    --token=: API token to use when authenticating
  completion:
    flag:
      color:
      - auto
      - always
      - never
    positional:
    - []
- name: package
  description: Assemble the local package into a distributable tarball
  flags:
    --all-features: Activate all available features
    --allow-dirty: Allow dirty working directories to be packaged
    --exclude=*: Don't assemble specified packages
    --exclude-lockfile: Don't include the lock file when packaging
    -F, --features=*: Space or comma separated list of features to activate
    -h, --help: Print help
    --index=: Registry index URL to prepare the package for
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    -l, --list: Print files included in a package without making one
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=: Output representation (unstable)
    --no-default-features: Do not activate the `default` feature
    --no-metadata: Ignore warnings about a lack of human-usable metadata
    --no-verify: Don't verify the contents by building them
    -p, --package=*: Package(s) to assemble
    --registry=: Registry to prepare the package for
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --workspace: Assemble all packages in the workspace
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - json
- name: pkgid
  description: Print a fully qualified package specification
  flags:
    -h, --help: Print help
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    -p, --package=: Argument to get the package ID specifier for
  completion:
    flag:
      color:
      - auto
      - always
      - never
    positional:
    - []
- name: publish
  description: Upload a package to the registry
  flags:
    --all-features: Activate all available features
    --allow-dirty: Allow dirty working directories to be packaged
    -n, --dry-run: Perform all checks without uploading
    --exclude=*: Don't publish specified packages
    -F, --features=*: Space or comma separated list of features to activate
    -h, --help: Print help
    --index=: Registry index URL to upload the package to
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --no-default-features: Do not activate the `default` feature
    --no-verify: Don't verify the contents by building them
    -p, --package=*: Package(s) to publish
    --registry=: Registry to upload the package to
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --token=: Token to use when uploading
    --workspace: Publish all packages in the workspace
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: remove
  description: Remove dependencies from a Cargo.toml manifest file
  flags:
    --build: Remove from build-dependencies
    --dev: Remove from dev-dependencies
    -n, --dry-run: Don't actually write the manifest
    -h, --help: Print help
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    -p, --package=: Package to remove from
    --target=: Remove from target-dependencies
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: report
  description: Generate and display various kinds of reports
  flags:
    -h, --help: Print help
  completion:
    flag:
      color:
      - auto
      - always
      - never
  commands:
  - name: future-incompatibilities
    aliases:
    - future-incompat
    description: Reports any crates which will eventually stop compiling
    flags:
      -h, --help: Print help
      --id=: identifier of the report generated by a Cargo command invocation
      -p, --package=: Package to display a report for
    completion:
      flag:
        color:
        - auto
        - always
        - never
- name: run
  description: Run a binary or example of the local package
  flags:
    --all-features: Activate all available features
    --bin=*: Name of the bin target to run
    --example=*: Name of the example target to run
    -F, --features=*: Space or comma separated list of features to activate
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    -p, --package=: Package with the target to run
    --profile=: Build artifacts with the specified profile
    -r, --release: Build artifacts in release mode, with optimizations
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
- name: rustc
  description: Compile a package, and pass extra options to the compiler
  flags:
    --all-features: Activate all available features
    --all-targets: Build all targets
    --bench=*: Build only the specified bench target
    --benches: Build all targets that have `bench = true` set
    --bin=*: Build only the specified binary
    --bins: Build all binaries
    --crate-type=*: Comma separated list of types of crates for the compiler to emit
    --example=*: Build only the specified example
    --examples: Build all examples
    -F, --features=*: Space or comma separated list of features to activate
    --future-incompat-report: Outputs a future incompatibility report at the end of the build
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --lib: Build only this package's library
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    -p, --package=: Package to build
    --print=: Output compiler information without compiling
    --profile=: Build artifacts with the specified profile
    -r, --release: Build artifacts in release mode, with optimizations
    --target=*: Target triple which compiles will be for
    --target-dir=: Directory for all generated artifacts
    --test=*: Build only the specified test target
    --tests: Build all targets that have `test = true` set
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
- name: rustdoc
  description: Build a package's documentation, using specified custom flags.
  flags:
    --all-features: Activate all available features
    --all-targets: Build all targets
    --bench=*: Build only the specified bench target
    --benches: Build all targets that have `bench = true` set
    --bin=*: Build only the specified binary
    --bins: Build all binaries
    --example=*: Build only the specified example
    --examples: Build all examples
    -F, --features=*: Space or comma separated list of features to activate
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --keep-going: Do not abort the build as soon as there is an error
    --lib: Build only this package's library
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    --open: Opens the docs in a browser after the operation
    --output-format=: The output type to write (unstable)
    -p, --package=: Package to document
    --profile=: Build artifacts with the specified profile
    -r, --release: Build artifacts in release mode, with optimizations
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --test=*: Build only the specified test target
    --tests: Build all targets that have `test = true` set
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
      output-format:
      - html
      - json
- name: search
  description: Search packages in the registry. Default registry is crates.io
  flags:
    -h, --help: Print help
    --index=: Registry index URL to search packages in
    --limit=: 'Limit the number of results (default: 10, max: 100)'
    --registry=: Registry to search packages in
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: test
  description: Execute all unit and integration tests and build examples of a local package
  flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Test all targets (does not include doctests)
    --bench=*: Test only the specified bench target
    --benches: Test all targets that have `bench = true` set
    --bin=*: Test only the specified binary
    --bins: Test all binaries
    --doc: Test only this library's documentation
    --example=*: Test only the specified example
    --examples: Test all examples
    --exclude=*: Exclude packages from the test
    -F, --features=*: Space or comma separated list of features to activate
    --future-incompat-report: Outputs a future incompatibility report at the end of the build
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs.'
    --lib: Test only this package's library
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format=*: Error format
    --no-default-features: Do not activate the `default` feature
    --no-fail-fast: Run all tests regardless of failure
    --no-run: Compile, but don't run tests
    -p, --package=*: Package to run tests for
    --profile=: Build artifacts with the specified profile
    -q, --quiet: Display one character per test instead of one line
    -r, --release: Build artifacts in release mode, with optimizations
    --target=*: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --test=*: Test only the specified test target
    --tests: Test all targets that have `test = true` set
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Test all packages in the workspace
  completion:
    flag:
      color:
      - auto
      - always
      - never
      message-format:
      - human
      - short
      - json
      - json-diagnostic-short
      - json-diagnostic-rendered-ansi
      - json-render-diagnostics
    positional:
    - []
- name: tree
  description: Display a tree visualization of a dependency graph
  flags:
    --all-features: Activate all available features
    --charset=: Character set to use in output
    --depth=: Maximum display depth of the dependency tree
    -d, --duplicates: Show only dependencies which come in multiple versions (implies -i)
    --duplicate&: Show only dependencies which come in multiple versions (implies -i)
    -e, --edges=*: The kinds of dependencies to display (features, normal, build, dev, all, no-normal, no-build, no-dev, no-proc-macro)
    --exclude=*: Exclude specific workspace members
    -F, --features=*: Space or comma separated list of features to activate
    -f, --format=: Format string used for printing dependencies
    -h, --help: Print help
    -i, --invert=*: Invert the tree direction and focus on the given package
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --no-dedupe: Do not de-duplicate (repeats all shared dependencies)
    --no-default-features: Do not activate the `default` feature
    -p, --package=*: Package to be used as the root of the tree
    --prefix=: Change the prefix (indentation) of how each entry is displayed
    --prune=*: Prune the given package from the display of the dependency tree
    --target=*: Filter dependencies matching the given target-triple (default host platform). Pass `all` to include all targets.
    --workspace: Display the tree for all packages in the workspace
  completion:
    flag:
      charset:
      - utf8
      - ascii
      color:
      - auto
      - always
      - never
      prefix:
      - depth
      - indent
      - none
- name: uninstall
  description: Remove a Rust binary
  flags:
    --bin=*: Only uninstall the binary NAME
    -h, --help: Print help
    -p, --package=*: Package to uninstall
    --root=: Directory to uninstall packages from
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: update
  description: Update dependencies as recorded in the local lock file
  flags:
    -b, --breaking: Update [SPEC] to latest SemVer-breaking version (unstable)
    -n, --dry-run: Don't actually write the lockfile
    -h, --help: Print help
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --precise=: Update [SPEC] to exactly PRECISE
    --recursive: Force updating all dependencies of [SPEC]... as well
    --aggressive&: Force updating all dependencies of [SPEC]... as well
    -w, --workspace: Only update the workspace packages
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: vendor
  description: Vendor all dependencies for a project locally
  flags:
    -h, --help: Print help
    --lockfile-path=: Path to Cargo.lock (unstable)
    --manifest-path=: Path to Cargo.toml
    --no-delete: Don't delete older crates in the vendor directory
    --respect-source-config: Respect `[source]` config in `.cargo/config`
    -s, --sync=*: Additional `Cargo.toml` to sync and vendor
    --versioned-dirs: Always include version in subdir name
  completion:
    flag:
      color:
      - auto
      - always
      - never
      sync:
      - $files
    positional:
    - - $files
- name: version
  description: Show version information
  flags:
    -h, --help: Print help
  completion:
    flag:
      color:
      - auto
      - always
      - never
- name: yank
  description: Remove a pushed crate from the index
  flags:
    -h, --help: Print help
    --index=: Registry index URL to yank from
    --registry=: Registry to yank from
    --token=: API token to use when authenticating
    --undo: Undo a yank, putting a version back into the index
    --version=: The version to yank or un-yank
    --vers=&: The version to yank or un-yank
  completion:
    flag:
      color:
      - auto
      - always
      - never
    positional:
    - []
